#!/usr/bin/env python3
"""Setup script for vibe-llm API keys and configuration"""

import os
import secrets
import string
from pathlib import Path

def generate_api_key(length: int = 32) -> str:
    """Generate a secure API key"""
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def setup_env_file():
    """Create .env file with necessary configuration"""
    env_path = Path(__file__).parent / ".env"
    
    if env_path.exists():
        print(f"Environment file already exists at {env_path}")
        response = input("Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            return
    
    # Generate keys
    master_key = generate_api_key(64)
    jwt_secret = generate_api_key(64)
    
    # Client keys for common projects
    client_keys = {
        "cleaning_service": generate_api_key(),
        "troves_coves": generate_api_key(),
        "coreflame": generate_api_key(),
        "astralvibe": generate_api_key(),
    }
    
    env_content = f"""# vibe-llm Configuration
# Generated by setup.py

# Security Keys
VIBE_LLM_MASTER_KEY={master_key}
VIBE_LLM_JWT_SECRET={jwt_secret}

# Client API Keys
VIBE_LLM_CLIENT_KEY_1={client_keys["cleaning_service"]}
VIBE_LLM_CLIENT_NAME_1=local-cleaning-service

VIBE_LLM_CLIENT_KEY_2={client_keys["troves_coves"]}
VIBE_LLM_CLIENT_NAME_2=troves-and-coves

VIBE_LLM_CLIENT_KEY_3={client_keys["coreflame"]}
VIBE_LLM_CLIENT_NAME_3=coreflame-protocol

VIBE_LLM_CLIENT_KEY_4={client_keys["astralvibe"]}
VIBE_LLM_CLIENT_NAME_4=astralvibe-platform

# AI Provider Configuration
IO_INTELLIGENCE_API_KEY=your_io_intelligence_key_here
HUGGINGFACE_API_TOKEN=your_huggingface_token_here

# VLLM Configuration (if using local VLLM)
VLLM_BASE_URL=http://localhost:8000
VLLM_API_KEY=optional_vllm_key

# Chroma DB Configuration
CHROMA_HOST=localhost
CHROMA_PORT=8000
CHROMA_SSL=false

# Rate Limiting
REDIS_URL=redis://localhost:6379/0

# Telemetry
TELEMETRY_ENABLED=true
LOG_LEVEL=INFO
"""
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"Environment file created at {env_path}")
    print("\nAPI Keys generated:")
    print(f"Master Key: {master_key}")
    print(f"JWT Secret: {jwt_secret}")
    print("\nClient Keys:")
    for name, key in client_keys.items():
        print(f"  {name}: {key}")
    
    print("\n⚠️  IMPORTANT: Store these keys securely!")
    print("⚠️  Update the AI provider keys with your actual credentials")

def create_docker_compose():
    """Create docker-compose.yml for supporting services"""
    compose_content = """version: '3.8'

services:
  vibe-llm:
    build: .
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
    depends_on:
      - redis
      - chroma
    volumes:
      - ./.env:/app/.env

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000

volumes:
  redis_data:
  chroma_data:
"""
    
    compose_path = Path(__file__).parent / "docker-compose.yml"
    with open(compose_path, 'w') as f:
        f.write(compose_content)
    
    print(f"Docker Compose file created at {compose_path}")

if __name__ == "__main__":
    print("Setting up vibe-llm...")
    setup_env_file()
    create_docker_compose()
    print("\nSetup complete! Next steps:")
    print("1. Update .env with your AI provider API keys")
    print("2. Run: docker-compose up -d (for supporting services)")
    print("3. Run: uvicorn app.main:app --host 0.0.0.0 --port 8000")
    print("4. Test: curl -H 'Authorization: Bearer YOUR_API_KEY' http://localhost:8000/v1/models")
